---
description: Semantic chunking algorithm documentation for handling document segmentation with context-aware boundaries and token management
globs: **/chunker.py,**/malmo_chunker.py,**/semantic/*.py
alwaysApply: false
---


# semantic-chunking-algorithm

Core Document Chunking Algorithm:

1. Document Semantic Analysis (Score: 95)
- LLM-based semantic boundary detection for natural content segmentation
- Multi-language chapter detection (English/Polish) 
- Scene break identification and meaningful unit segmentation
- Minimum semantic density requirements (5 units per chunk)
- Fallback boundary detection when LLM analysis fails

2. Document Structure Processing (Score: 85)
- Content type classification system with specific rules for:
  * Headings and chapter markers
  * Blockquotes and lists 
  * Code blocks and tables
- Attachment logic for content coherence:
  * "following" elements attach forward
  * "preceding" elements attach backward
  * "normal" elements remain independent

3. Token Management System (Score: 90)
- Dynamic token counting for semantic units
- Intelligent splitting of oversized units while preserving meaning
- Token budget distribution across chunks
- Token verification and rebalancing for optimal sizing

4. Document Hierarchy Rules (Score: 80)
- Three-tier structure:
  * Chunks (token management)
  * Units (semantic groups)
  * Items (base content)
- Semantic relationship preservation during chunking
- Structural integrity maintenance

5. Error Recovery Strategy (Score: 75)
- Multi-stage semantic analysis fallback:
  * Primary model (GPT-4.1)
  * Secondary model (Gemini)
  * Heuristic-based fallback
- Document integrity preservation during failures
- Minimum semantic structure guarantees

Key Implementation Files:
- src/e11ocutionist/chunker.py
- legacy_src/malmo_chunker.py

$END$