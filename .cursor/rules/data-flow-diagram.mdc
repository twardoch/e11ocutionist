---
description: Maps data flow between text processing stages through the pipeline components in an ElevenLabs TTS workflow
globs: src/e11ocutionist/*.py,legacy_src/*.py
alwaysApply: false
---


# data-flow-diagram

Core Pipeline Data Flow:

1. Text Input → Chunking Stage
- Input: Raw text documents
- Output: Semantically chunked XML segments with token limits
- File: legacy_src/malmo_chunker.py
- Semantic rules determine chunk boundaries
- Token count verification ensures size constraints

2. Chunks → Entity Processing Stage 
- Input: XML chunks with semantic boundaries
- Output: XML with tagged named entities and pronunciations
- File: legacy_src/malmo_entitizer.py
- NEI dictionary tracks entity pronunciations
- Progressive learning updates pronunciation mappings

3. Entity-Tagged Text → Oration Enhancement
- Input: Entity-tagged XML chunks
- Output: XML with speech enhancement markup
- File: legacy_src/malmo_orator.py  
- Sentence restructuring for speech flow
- Emotional emphasis tagging
- Punctuation optimization

4. Enhanced Text → Tone Adjustment
- Input: Speech-enhanced XML
- Output: XML with balanced emphasis
- File: legacy_src/malmo_tonedown.py
- Emphasis reduction based on token distance
- Language-aware pronunciation review

5. Adjusted Text → Speech Synthesis
- Input: Final XML with speech markup
- Output: Voice synthesis instructions
- File: src/e11ocutionist/elevenlabs_converter.py
- Dialog mode processing for quotes
- Break timing conversion
- Emphasis marker transformation

Key Integration Points:

- Stage Dependency Management
File: src/e11ocutionist/e11ocutionist.py
- Validates stage completion before progression
- Maintains processing state for resume capability
- Enables selective stage execution with force_restart

- Pipeline Orchestration
File: legacy_src/malmo_all.py
- Coordinates data flow between stages
- Handles stage-specific model parameters
- Implements progress tracking and recovery

The data flows through a sequential pipeline with each stage transforming the text while preserving semantic structure and adding speech-specific markup. Stage outputs become inputs for subsequent processing, with strict dependency validation between components.

$END$