---
description: Specification for text enhancement pipeline including sentence restructuring, normalization, punctuation rules and emotional markup
globs: src/e11ocutionist/orator.py,legacy_src/malmo_orator.py
alwaysApply: false
---


# text-enhancement-pipeline

The text enhancement pipeline implements a four-stage document processing workflow specifically designed for optimizing written content for speech synthesis:

## Stage 1: Sentence Restructuring (Importance: 85)
- Splits long sentences at logical pause points using commas and semicolons
- Enforces paragraph breaks through double newlines
- Requires punctuation marks at paragraph/heading endings
- Processes content in batches to manage token limits

## Stage 2: Word Normalization (Importance: 75) 
- Converts numerical digits to spelled-out words with context awareness
- Transforms symbols (/, &) into appropriate speech-friendly conjunctions
- Implements language-specific handling of special characters
- Maintains original meaning while optimizing for spoken delivery

## Stage 3: Punctuation Enhancement (Importance: 90)
- Handles parenthetical expressions by adding ellipses for dramatic effect
- Converts em/en dashes to pauses when surrounded by spaces  
- Preserves hyphenation in compound words
- Inserts pause markers (<hr/>) after colons
- Optimizes list item pacing
- Removes redundant commas

## Stage 4: Emotional Emphasis (Importance: 95)
- Adds XML-based emphasis tags (<em>) for dramatic delivery
- Inserts dramatic pauses using <hr/> tags
- Strategic placement of exclamation marks for energy
- Maintains natural text fluidity while adding expressiveness
- Implements minimum distance rules between emphasis markers

Key Implementation Files:
- src/e11ocutionist/orator.py
- legacy_src/malmo_orator.py

The pipeline focuses specifically on enhancing text for optimal speech synthesis while preserving semantic meaning and adding natural-sounding emotional expression.

$END$